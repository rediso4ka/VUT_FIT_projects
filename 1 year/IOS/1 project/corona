#!/bin/sh

# # # # # # # # # # # # # # # # # # # # # #
# File:   corona                          #
# Author: Shevchenko Aleksandr (xshevc01) #
# Date:   30.03.2022                      #
# # # # # # # # # # # # # # # # # # # # # #


FIRST_LINE="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
export POSIXLY_CORRECT=yes


# # # # # # #
# FUNCTIONS #
# # # # # # #

print_help()
{
	echo "corona — analyzátor záznamů osob s prokázanou nákazou koronavirem způsobujícím onemocnění COVID-19"
	echo
	echo "POUŽITÍ corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
	echo
	echo "VOLBY: "
	echo
	echo "	infected			spočítá počet nakažených."
	echo
	echo "	merge				sloučí několik souborů se záznamy do jednoho," 
	echo "					zachovávající původní pořadí (hlavička bude "
	echo "					ve výstupu jen jednou)."
	echo
	echo "	gender				vypíše počet nakažených pro jednotlivá pohlaví."
	echo
	echo "	age				vypíše statistiku počtu nakažených osob "
	echo "					dle věku (bližší popis je níže)."
	echo
	echo "	daily				vypíše statistiku nakažených osob "
	echo "					pro jednotlivé dny."
	echo
	echo "	monthly				vypíše statistiku nakažených osob "
	echo "					pro jednotlivé měsíce."
	echo
	echo "	yearly				vypíše statistiku nakažených osob "
	echo "					pro jednotlivé roky."
	echo
	echo "	countries			vypíše statistiku nakažených osob "
	echo "					pro jednotlivé země nákazy "
	echo "					(bez ČR, tj. kódu CZ)."
	echo
	echo "	districts			vypíše statistiku nakažených osob "
	echo "					pro jednotlivé okresy."
	echo
	echo "	regions				vypíše statistiku nakažených osob "
	echo "					pro jednotlivé kraje."
	echo
	echo
	echo "FILTERS: "
	echo
	echo "	-a DATETIME			— after: jsou uvažovány pouze záznamy "
	echo "					PO tomto datu (včetně tohoto data). "
	echo "					DATETIME je formátu YYYY-MM-DD."
	echo
	echo "	-b DATETIME			— before: jsou uvažovány pouze záznamy "
	echo "					PŘED tímto datem (včetně tohoto data)."
	echo
	echo "	-g GENDER			jsou uvažovány pouze záznamy nakažených "
	echo "					osob daného pohlaví. GENDER může být "
	echo "					M (muži) nebo Z (ženy)."
	echo
	echo "	-s [WIDTH]			u příkazů gender, age, daily, monthly, "
	echo "					yearly, countries, districts a regions "
	echo "					vypisuje data ne číselně, ale graficky v "
	echo "					podobě histogramů. Nepovinný parametr "
	echo "					WIDTH nastavuje šířku histogramů, tedy "
	echo "					délku nejdelšího řádku, na WIDTH. Tedy, "
	echo "					WIDTH musí být kladné celé číslo."
	echo
	echo "	-d DISTRICT_FILE		* pro příkaz districts vypisuje místo LAU "
	echo "					1 kódu okresu jeho jméno. Mapování kódů na "
	echo "					jména je v souboru DISTRICT_FILE"
	echo
	echo "	-r REGIONS_FILE			* pro příkaz regions vypisuje místo NUTS 3 "
	echo "					kódu kraje jeho jméno. Mapování kódů na "
	echo "					jména je v souboru REGIONS_FILE"
	echo
	echo
	echo "-h					vypíše nápovědu s krátkým popisem každého "
	echo "					příkazu a přepínače."
	exit 0
}

print_error()
{
	case "$ERROR" in
		A_LOT_OF_COMMANDS | WRONG_FILE | BAD_ARGUMENT | MORE_THAN_ONE_WIDTH | WRONG_WIDTH | NO_FILE)
			echo "$ERROR"
			;;
		*)
			echo "UNKNOWN_ERROR"
			;;
	esac
	exit 1
}


# # # # # # #
# VARIABLES #
# # # # # # #

ERROR=""
SEP="[, ]"
INPUT=""

SHIFT_TIMES="one"
DATETIME_A="0000-00-00"
DATETIME_B="9999-99-99"
GENDER=""
CSV_FILES=""
GZ_FILES=""
BZ2_FILES=""
HISTOGRAM=0
WIDTH=""


# # # # # #
# PARSING #
# # # # # #

while [ $# -ne 0 ]
do
	case "$1" in
		-h)
			print_help
			;;
		-a)
			DATETIME_A="$2"
			SHIFT_TIMES="two"
			;;
		-b)
			DATETIME_B="$2"
			SHIFT_TIMES="two"
			;;
		-g)
			GENDER="$2"
			SHIFT_TIMES="two"
			;;
		-s)
			if [ -n "$WIDTH" ]; then
				ERROR="MORE_THAN_ONE_WIDTH"
				print_error
			else
				if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then
					if [ "$2" -lt "0" ]; then
						ERROR="WRONG_WIDTH"
						SHIFT_TIMES="two"
					else
						WIDTH="$2"
						SHIFT_TIMES="two"
					fi
				fi
			fi
			HISTOGRAM=1
			;;
		infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
			if [ -n "$COMMAND" ]; then
				ERROR="A_LOT_OF_COMMANDS"
				print_error
			else
				COMMAND="$1"
			fi
			;;
		*.csv)
			if [ -f "$1" ]; then
				CSV_FILES="$CSV_FILES $1"
			else
				ERROR="WRONG_FILE"
				print_error
			fi
			;;
		*.gz)
			if [ -f "$1" ]; then
				GZ_FILES="$GZ_FILES $1"
			else
				ERROR="WRONG_FILE"
				print_error
			fi
			;;
		*.bz2)
			if [ -f "$1" ]; then
				BZ2_FILES="$GZ_FILES $1"
			else
				ERROR="WRONG_FILE"
				print_error
			fi
			;;
		*)
			ERROR="BAD_ARGUMENT"
			print_error
			;;
	esac
	shift
	if [ "$SHIFT_TIMES" = "two" ]; then
		shift
		SHIFT_TIMES="one"
	fi
done


# # # # # # # # #
# FILE READING  #
# # # # # # # # #

if [ -n "$BZ2_FILES" ]; then
	INPUT="bzip2 -d -c $BZ2_FILES "
fi
if [ -n "$GZ_FILES" ]; then
	INPUT="$INPUT gzip -d -c $GZ_FILES "
fi
if [ -n "$CSV_FILES" ]; then
	INPUT="$INPUT cat $CSV_FILES"
fi
if [ -z "$INPUT" ]; then
	INPUT="cat "
fi


# # # # # #
# FILTERS #
# # # # # #

FILTERS=" \
awk \
-F '$SEP' \
-v dateA=\"$DATETIME_A\" \
-v dateB=\"$DATETIME_B\" \
-v gender=\"$GENDER\" \
'
{ 
	if (\$2 > dateA && \$2 < dateB && (gender == \"\" || \$4 == gender)) {
		print \$0;
	}
}
' \
"


# # # # # # #
# COMMANDS  #
# # # # # # #

#
# infected
#

INFECTED=" \
awk \
-F '$SEP' \
-v infected=0 \
'
{
	infected+=1
}
END { printf \"%d\n\", infected }
' \
"


#
# gender
#

GENDERS=" \
awk \
-F '$SEP' \
-v men=0 \
-v women=0 \
-v none=0 \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
'
{
	if (\$4 == \"M\") {
		men+=1;
	} else if (\$4 == \"Z\") {
		women+=1;
	} else {
		none+=1;	
	} 
}
END { \
	if (histogram == 0) {
		printf \"M: %d\nZ: %d\n\", men, women;
		if (none != 0){
			printf \"None: %d\n\", none;
		}
	} else {
		max = men;
		if (women > max)
			max = women;
		if (none > max)
			max = none;
		men_amount = int(men / 100000);
		women_amount = int(women / 100000);
		none_amount = int(none / 100000);
		if (width != \"\") {
			men_amount = int(men * width / max);
			women_amount = int(women * width / max);
			none_amount = int(none * width / max);
		}
		hist_men = \"\";
		hist_women = \"\";
		hist_none = \"\";
		for (i = 0; i < men_amount; i++) {
			hist_men = hist_men \"#\";
		}
		for (i = 0; i < women_amount; i++) {
			hist_women = hist_women \"#\";
		}
		for (i = 0; i < none_amount; i++) {
			hist_none = hist_none \"#\";
		}
		printf \"M: %s\nZ: %s\n\", hist_men, hist_women;
		if (none != 0) {
			printf \"None: %s\n\", hist_none;
		}
	}
}
' \
"


#
# age
#

AGE=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	interval[0]=\"0-5\";
	interval[1]=\"6-15\";
	interval[2]=\"16-25\";
	interval[3]=\"26-55\";
	interval[4]=\"36-45\";
	interval[5]=\"46-55\";
	interval[6]=\"56-65\";
	interval[7]=\"66-75\";
	interval[8]=\"76-85\";
	interval[9]=\"86-95\";
	interval[10]=\"96-105\";
	interval[11]=\">105\";
	interval[12]=\"None\";
	
	if (\$3 < 0) {
		age[12]+=1;
		max < age[12] ? max = age[12] : 0;
	} else if (\$3 <= 5) {
		age[0]+=1;
		max < age[0] ? max = age[0] : 0;
	} else if (\$3 <= 15) {
		age[1]+=1;
		max < age[1] ? max = age[1] : 0;
	} else if (\$3 <= 25) {
		age[2]+=1;
		max < age[2] ? max = age[2] : 0;
	} else if (\$3 <= 35) {
		age[3]+=1;
		max < age[3] ? max = age[3] : 0;
	} else if (\$3 <= 45) {
		age[4]+=1;
		max < age[4] ? max = age[4] : 0;
	} else if (\$3 <= 55) {
		age[5]+=1;
		max < age[5] ? max = age[5] : 0;
	} else if (\$3 <= 65) {
		age[6]+=1;
		max < age[6] ? max = age[6] : 0;
	} else if (\$3 <= 75) {
		age[7]+=1;
		max < age[7] ? max = age[7] : 0;
	} else if (\$3 <= 85) {
		age[8]+=1;
		max < age[8] ? max = age[8] : 0;
	} else if (\$3 <= 95) {
		age[9]+=1;
		max < age[9] ? max = age[9] : 0;
	} else if (\$3 <= 105) {
		age[10]+=1;
		max < age[10] ? max = age[10] : 0;
	} else if (\$3 > 105) {
		age[11]+=1;
		max < age[11] ? max = age[11] : 0;
	}
}
END { \
	if (histogram == 0) {
		for (i = 0; i <= 12; i++) {
			printf \"%-6s: %d\n\",interval[i],age[i];
		}
	} else {
		for (i = 0; i <= 12; i++) {
			amount = int(age[i] / 10000);
			if (width != \"\"){
				amount=int(age[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%-6s: %s\n\", interval[i], hist;
		}
	}
}
' \
"


#
# daily
#

DAILY=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (\$2 == \"\") {
		daily[\"None\"]+=1;
		if (daily[\"None\"] > max){
			max = daily[\"None\"];
		}
	} else {
		daily[\$2]+=1;
		if (daily[\$2] > max){
			max = daily[\$2];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in daily) {
			printf \"%s: %d\n\", i, daily[i];
		}
	} else {
		for (i in daily) {
			amount = int(daily[i] / 500);
			if (width != \"\"){
				amount=int(daily[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


#
# monthly
#

MONTHLY=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (substr(\$2,1,7) ==\"\"){
		monthly[\"None\"]+=1;
		if (monthly[\"None\"] > max){
			max = monthly[substr(\$2,1,7)];
		}
	} else {
		monthly[substr(\$2,1,7)] += 1;
		if (monthly[substr(\$2,1,7)] > max){
			max = monthly[substr(\$2,1,7)];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in monthly) {
			printf \"%s: %d\n\", i, monthly[i];
		}
	} else {
		for (i in monthly) {
			amount = int(monthly[i] / 10000);
			if (width != \"\"){
				amount=int(monthly[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


#
# yearly
#

YEARLY=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (substr(\$2,1,4) == \"\") {
		yearly[\"None\"]+=1;
		if (yearly[\"None\"] > max) {
			max = yearly[\"None\"];
		}
	} else {
		yearly[substr(\$2,1,4)] += 1;
		if (yearly[substr(\$2,1,4)] > max){
			max = yearly[substr(\$2,1,4)];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in yearly) {
			printf \"%s: %d\n\", i, yearly[i];
		}
	} else {
		for (i in yearly) {
			amount = int(yearly[i] / 100000);
			if (width != \"\"){
				amount=int(yearly[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


#
# countries
#

COUNTRIES=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (\$8 != \"\") {
		countries[\$8] += 1;
		if (countries[\$8] > max){
			max = countries[\$8];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in countries) {
			printf \"%s: %d\n\", i, countries[i];
		}
	} else {
		for (i in countries) {
			amount = int(countries[i] / 100);
			if (width != \"\"){
				amount=int(countries[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


#
# districts
#

DISTRICTS=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (\$6 == \"\") {
		districts[\"None\"]+=1;
		if (districts[\"None\"] > max) {
			max = districts[\"None\"];
		}
	} else {
		districts[\$6] += 1;
		if (districts[\$6] > max){
			max = districts[\$6];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in districts) {
			printf \"%s: %d\n\", i, districts[i];
		}
	} else {
		for (i in districts) {
			amount = int(districts[i] / 1000);
			if (width != \"\"){
				amount=int(districts[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


#
# regions
#

REGIONS=" \
awk \
-F '$SEP' \
-v width=\"$WIDTH\" \
-v histogram=\"$HISTOGRAM\" \
-v max=0 \
'
{
	if (\$5 == \"\") {
		regions[\"None\"]+=1;
		if (regions[\"None\"] > max) {
			max = regions[\"None\"];
		}
	} else {
		regions[\$5] += 1;
		if (regions[\$5] > max){
			max = regions[\$5];
		}
	}
}
END \
{
	if (histogram == 0) {
		for (i in regions) {
			printf \"%s: %d\n\", i, regions[i];
		}
	} else {
		for (i in regions) {
			amount = int(regions[i] / 10000);
			if (width != \"\"){
				amount=int(regions[i] * width / max);
			}
			hist = \"\";
			for (j = 0; j < amount; j++) {
				hist = hist \"#\";
			}
			printf \"%s: %s\n\", i, hist;
		}
	}
}
' \
| sort \
"


# # # # # # #
# EXECUTION #
# # # # # # #

if [ "$COMMAND" = "infected" ]; then
	COMMAND_EXEC="$INFECTED";
elif [ "$COMMAND" = "gender" ]; then
	COMMAND_EXEC="$GENDERS";
elif [ "$COMMAND" = "age" ]; then
	COMMAND_EXEC="$AGE";
elif [ "$COMMAND" = "daily" ]; then
	COMMAND_EXEC="$DAILY";
elif [ "$COMMAND" = "monthly" ]; then
	COMMAND_EXEC="$MONTHLY";
elif [ "$COMMAND" = "yearly" ]; then
	COMMAND_EXEC="$YEARLY";
elif [ "$COMMAND" = "countries" ]; then
	COMMAND_EXEC="$COUNTRIES";
elif [ "$COMMAND" = "districts" ]; then
	COMMAND_EXEC="$DISTRICTS";
elif [ "$COMMAND" = "regions" ]; then
	COMMAND_EXEC="$REGIONS";
fi


# # # # # #
# RUNNING #
# # # # # #

if [ -n "$COMMAND" ] && [ "$COMMAND" != "merge" ]; then
	eval "$INPUT | $FILTERS | $COMMAND_EXEC"
else
	eval "echo $FIRST_LINE && $INPUT | $FILTERS"
fi

