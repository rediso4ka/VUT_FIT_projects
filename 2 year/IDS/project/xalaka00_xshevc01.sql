/*
    ****************************************
    *        Projekt IDS (cast 4)          *
    * Autori:                              *
    *   Kambulat Alakaev (xalaka00)        *
    *   Aleksandr Shevchenko (xshevc01)    *
    ****************************************
*/


BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Departments CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE Diagnostic CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE DoseOfMedicines CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE MadeDiagnostic CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE NursePatient CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE Patients CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE Workers CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP TABLE DoctorsNurses CASCADE CONSTRAINTS';
   EXECUTE IMMEDIATE 'DROP INDEX Worker_name_index';
   EXECUTE IMMEDIATE 'DROP INDEX Departments_floor_index';
   EXECUTE IMMEDIATE 'DROP INDEX Departments_name_index';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 AND SQLCODE !=  -1418 THEN
         RAISE;
      END IF;
END;
/
 -- nastaveni formatu data
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY';


-- entitni mnozina Oddeleni
CREATE TABLE Departments (
    ID_department int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dep_name char(255) NOT NULL,
    floor int NOT NULL
    -- omezeni pro ciselne hodnoty pole 'floor'
    CONSTRAINT check_floor CHECK ( floor >= 1 AND floor <= 100 )
);


-- Jelikož v našem případě generalizace je disjunktní (lékař nemůže být sestrou a naopak), a
-- částečná (kromě těchto typů pracovníků potenciálně můžou být předané i jiné, např. sanitář)
-- použili jsme variantu s jednou tabulkou pro nadtyp a druhou pro oba podtypy.

-- entitni mnozina Zdravotni pracovnik
CREATE TABLE Workers (
    ID_worker int  GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    worker_name char(255) NOT NULL,
    personal_ID int NOT NULL,
    phone_number char(255) NOT NULL,
    email char(255) NOT NULL,
    specialisation char(255) NOT NULL,
    chief int,
    department int NOT NULL,

    -- nadrizeny
    CONSTRAINT FK_chief FOREIGN KEY (chief)
    REFERENCES Workers(ID_worker),

    -- cizi klic k oddeleni: vztah 'patri'
    CONSTRAINT FK_department FOREIGN KEY (department)
    REFERENCES Departments(ID_department)

);

-- entitni mnozina Lekaru a zdr. sester
CREATE TABLE DoctorsNurses (
    ID_worker int PRIMARY KEY ,
    worker_type char(255) NOT NULL ,
    cabinet char(255) ,
    reception_number char(255),
    working_rate char(255),

    CONSTRAINT FK_worker FOREIGN KEY (ID_worker)
    REFERENCES Workers(ID_worker)
    ON DELETE CASCADE,

    --povoleni pracovnici jsou jen lekari a zdr. sestry
    CONSTRAINT check_worker_name CHECK ( worker_type in ('doctor','nurse'))
);


-- entitni mnozina Pacient
CREATE TABLE Patients (
    ID_patient int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pat_name char(255) NOT NULL ,
    personal_ID int NOT NULL ,
    phone_number char(255) NOT NULL ,
    allergy char(255),
    department int NOT NULL ,
    treating_doctor int NOT NULL,

    -- cizi klic k lekaru: vztah 'prirazen'
    CONSTRAINT FK_doctor FOREIGN KEY (treating_doctor)
    REFERENCES DoctorsNurses(ID_worker),

    -- cizi klic k oddeleni: vztah 'hospitalizovan'
    CONSTRAINT FK_dep FOREIGN KEY (department)
    REFERENCES Departments(ID_department)
);


-- prostredni tabulka pro vztah 'stara se' (many to many)
CREATE TABLE NursePatient (
    ID_nurse int NOT NULL,
    ID_patient int NOT NULL,
    PRIMARY KEY(ID_nurse,ID_patient),

    CONSTRAINT FK_pat FOREIGN KEY (ID_patient)
    REFERENCES Patients(ID_patient)
    ON DELETE CASCADE,

    CONSTRAINT FK_nurse FOREIGN KEY (ID_nurse)
    REFERENCES DoctorsNurses(ID_worker)
    ON DELETE CASCADE
);


-- entitni mnozina Vysetreni
CREATE TABLE Diagnostic (
    ID_diagnostic int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    diag_date DATE NOT NULL,
    diagnosis char(255) NOT NULL
);


-- prostredni tabulka pro vztah 'provadi' (many to many)
CREATE TABLE MadeDiagnostic (
    ID_diagnostic int NOT NULL,
    ID_doctor int NOT NULL ,
    ID_patient int NOT NULL,

    PRIMARY KEY (ID_doctor,ID_patient,ID_diagnostic),

    CONSTRAINT FK_diag FOREIGN KEY (ID_diagnostic)
    REFERENCES Diagnostic(ID_diagnostic)
    ON DELETE CASCADE,

    CONSTRAINT FK_doc FOREIGN KEY (ID_doctor)
    REFERENCES DoctorsNurses(ID_worker)
    ON DELETE CASCADE,

    CONSTRAINT FK_p FOREIGN KEY (ID_patient)
    REFERENCES Patients(ID_patient)
    ON DELETE CASCADE
);


-- entitni mnozina Davka leku
CREATE TABLE DoseOfMedicines (
    ID_medicine int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient int NOT NULL,
    med_name char(255) NOT NULL,
    contraindication char(255),
    way_to_use char(255),
    quantity char(255) NOT NULL,

    -- cizi klic k pacientovi: vztah 'bere'
    CONSTRAINT FK_patient FOREIGN KEY (patient)
    REFERENCES Patients(ID_patient)
);

/***************** TRIGGERS *****************/

-- Checks if each doctor does not have more than 5 patients at once before inserting new patient
CREATE OR REPLACE TRIGGER doctor_patient_limit
    BEFORE INSERT ON Patients
    REFERENCING OLD AS old_patients NEW AS new_patients
    FOR EACH ROW
DECLARE
  doctor_patient_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO doctor_patient_count
  FROM Patients
  WHERE treating_doctor = :new_patients.treating_doctor;

  IF doctor_patient_count >= 5 THEN
    RAISE_APPLICATION_ERROR(-20001, 'A doctor cannot have more than 5 patients at the same time!');
  END IF;
END;


-- Checks if date to be inserted is not after the actual date
CREATE OR REPLACE TRIGGER diagnostic_valid_date
	BEFORE INSERT OR UPDATE ON Diagnostic
	FOR EACH ROW
BEGIN
	IF :new.diag_date > sysdate THEN
		Raise_Application_Error(-20021, 'Invalid date of diagnostic!');
	END IF;
END;


-- Counts the average number of diagnostics for patients who had more than given number of diagnostics
CREATE OR REPLACE PROCEDURE avg_diagnostics (min_num_of_diagnostics NUMBER) AS
    CURSOR c_diagnostics IS
        SELECT ID_patient, COUNT(DISTINCT ID_diagnostic) as diag_count
        FROM MadeDiagnostic
        GROUP BY ID_patient
        HAVING COUNT(DISTINCT ID_diagnostic) >= min_num_of_diagnostics;


    var_diag_count MadeDiagnostic.ID_diagnostic%TYPE;
    var_patients_count MadeDiagnostic.ID_patient%TYPE;
    avg_num_of_diagnostics  NUMBER(10,2);
    BEGIN
       var_diag_count := 0;
       var_patients_count := 0;
       FOR diagnostic IN c_diagnostics LOOP
            var_diag_count := var_diag_count + diagnostic.diag_count;
            var_patients_count := var_patients_count + 1;
       END LOOP;

       IF var_patients_count <= 0 THEN
            Raise_Application_Error(-20021, 'Division by zero has occurred!');
       ELSE
           avg_num_of_diagnostics := var_diag_count / var_patients_count;
           DBMS_OUTPUT.PUT_LINE(avg_num_of_diagnostics);
       END IF;
    END;


-- Prints ID and name of patients who were treated before the given date
CREATE OR REPLACE PROCEDURE treated_patients_before (target_date DATE) AS
    CURSOR c_diagnostics IS
        SELECT DISTINCT MD.ID_patient, P.pat_name
        FROM MadeDiagnostic MD JOIN DIAGNOSTIC D on MD.ID_diagnostic = D.ID_DIAGNOSTIC
            JOIN PATIENTS P on MD.ID_patient = P.ID_patient
        WHERE D.diag_date <= target_date;

    patients_count MadeDiagnostic.ID_patient%TYPE;

    BEGIN
       patients_count := 0;
       FOR diagnostic IN c_diagnostics LOOP
            DBMS_OUTPUT.PUT_LINE(diagnostic.ID_patient ||' '|| diagnostic.pat_name);
       END LOOP;
    END;

/***************** DATA *****************/


INSERT INTO Departments (dep_name, floor)
VALUES ('Pediatrics department', 1);

INSERT INTO Departments (dep_name, floor)
VALUES ('Operating theatre', 2);

INSERT INTO Departments(dep_name, floor)
VALUES ('Intensive care unit', 3);

INSERT INTO Departments(dep_name, floor)
VALUES ('Neurology department', 4);

INSERT INTO Departments(dep_name, floor)
VALUES ('Gynaecology department', 5);

INSERT INTO Departments(dep_name, floor)
VALUES ('Cardiology department', 6);

INSERT INTO Departments(dep_name, floor)
VALUES ('Stomatology', 1);

INSERT INTO Departments(dep_name, floor)
VALUES ('Surgery', 1);


INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Daniel Redkliff', 14342, '123', 'daniel@daniel', 'Surgeon', null, 2);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Laurence Harper', 1242, '5454', 'larry@larry', 'pediatrician', null, 1);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Valeria Vaughn', 1434, '123232', 'val@val', 'Surgical Assistant Registered Nurse', 2, 1);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Joe Cocker', 64446, '8-800-555-35-35', 'co@joe', 'gynecologist', null, 5);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Trix Kym', 543341, '(420)432-121-11', 'trix@kim', 'neurologist', null, 4);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Whitney Houston', 543341, '(420)3121223', 'white@hue', 'dentist', null, 7);

INSERT INTO Workers(worker_name, personal_ID, phone_number, email, specialisation, chief, department)
VALUES ('Willy Wonka', 654234, '(420)3120923', 'willy@wonka', 'surgeon', null, 8);


INSERT INTO DoctorsNurses
VALUES (1, 'doctor', '25', null, null);

INSERT INTO DoctorsNurses
VALUES (2, 'doctor', '12', null, null);

INSERT INTO DoctorsNurses
VALUES (3, 'nurse',null, '10', 'part time');

INSERT INTO DoctorsNurses
VALUES (4, 'doctor', '51', null, null);

INSERT INTO DoctorsNurses
VALUES (5, 'doctor', '42', null, null);

INSERT INTO DoctorsNurses
VALUES (6, 'doctor', '17', null, null);

INSERT INTO DoctorsNurses
VALUES (7, 'doctor', '66', null, null);


INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Ice Cube', 787523, '+421989765430', 'exams', 1, 2);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Suzi Quatro', 732899, '+420534539856', 'Bees', 5, 4);

INSERT INTO Patients(pat_name, personal_ID, phone_number, department, treating_doctor)
VALUES ('Chris Norman', 233870, '+420123765234', 1, 2);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Tina Turner', 234974, '+421909900999', 'Flowers', 6, 4);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Nelly Furtado', 657451, '+421787454377', 'iodine', 7, 1);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Cyndi Lauper', 606050, '+420123998630', 'oranges', 2, 3);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Nick Cave', 555432, '+421244998011', 'pistachio', 4, 2);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Bob Dylan', 550802, '+421247530011', 'almond', 2, 2);

INSERT INTO Patients(pat_name, personal_ID, phone_number, allergy, department, treating_doctor)
VALUES ('Chris Isaak', 679432, '+426134998011', 'cactus', 5, 2);



INSERT INTO NursePatient
VALUES (3, 1);

INSERT INTO NursePatient
VALUES (3, 3);

INSERT INTO NursePatient
VALUES (3, 6);


INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('13-05-2007', 'hopeless');

INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('13-05-2008', 'healthy?!');

INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('23-04-2007', 'leg fracture');

INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('13-05-2007', 'arm fracture');

INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('13-05-2020', 'migraine');

INSERT INTO Diagnostic(diag_date, diagnosis)
VALUES ('27-05-2021', 'alcoholism');

INSERT INTO MadeDiagnostic
VALUES (1, 1, 1);

INSERT INTO MadeDiagnostic
VALUES (2, 2, 1);

INSERT INTO MadeDiagnostic
VALUES (3, 6, 2);

INSERT INTO MadeDiagnostic
VALUES (4, 5, 3);

INSERT INTO MadeDiagnostic
VALUES (5, 5, 3);

INSERT INTO MadeDiagnostic
VALUES (3, 2, 2);

INSERT INTO MadeDiagnostic
VALUES (6, 6, 4);

INSERT INTO MadeDiagnostic
VALUES (6, 2, 4);


INSERT INTO DoseOfMedicines(patient, med_name, way_to_use, quantity)
VALUES (1, 'tantum verde', 'inside', '2 packs');

INSERT INTO DoseOfMedicines(patient, med_name, way_to_use, quantity)
VALUES (1, 'magnesium B6', 'inside', '1 pack');

INSERT INTO DoseOfMedicines(patient, med_name, way_to_use, quantity)
VALUES (1, 'glicin', 'inside', '3 packs');

INSERT INTO DoseOfMedicines(patient, med_name, contraindication, way_to_use, quantity)
VALUES (2, 'ketorol', 'no pregnancy', 'inside', '1 pill');

INSERT INTO DoseOfMedicines(patient, med_name, way_to_use, quantity)
VALUES (2, 'triderm', 'smear', '2 tubes');

/***************** SELECTS *****************/

-- 1) Which patients are treated on the first floor and have no allergy?
SELECT P.pat_name
FROM PATIENTS P JOIN DEPARTMENTS D on P.department = D.id_department
WHERE P.allergy is null AND D.floor = 1;

-- 2) Is there a doctor named 'Joe Cocker' working in the hospital?
SELECT W.ID_worker, W.worker_name, DN.worker_type
FROM WORKERS W JOIN DOCTORSNURSES DN ON W.ID_worker = DN.ID_worker
WHERE DN.worker_type = 'doctor' AND W.worker_name = 'Joe Cocker';

-- 3) Which doctors ever prescribed 'ketorol' for their patients?
SELECT W.ID_worker, W.worker_name, P.ID_patient, P.pat_name, DM.med_name, DM.quantity
FROM WORKERS W JOIN PATIENTS P ON W.ID_workeR = P.treating_doctor
    JOIN DOSEOFMEDICINES DM ON P.ID_patient = DM.patient
WHERE  DM.med_name = 'ketorol';

-- 4) Which doctor had the biggest amount of patients?
SELECT W.ID_worker, W.worker_name, COUNT(*) as treated_patients
FROM WORKERS W JOIN PATIENTS P ON P.treating_doctor = W.ID_worker
GROUP BY W.ID_worker, W.worker_name
HAVING COUNT(*) >= ALL (
    SELECT COUNT(*)
    FROM WORKERS W, PATIENTS P
    WHERE P.treating_doctor = W.ID_worker
    GROUP BY W.ID_worker, W.worker_name
    );

-- 5) Which patients had minimum 2 diagnostics?
SELECT P.ID_patient, P.pat_name, COUNT(*) as cnt_diagnosed
FROM PATIENTS P JOIN MADEDIAGNOSTIC MD ON P.ID_patient = MD.ID_patient
GROUP BY P.ID_patient, P.pat_name
HAVING COUNT(*) >= 2;

-- 6) Which patients were treated by the doctor, who treated Tina Turner?
SELECT P1.ID_patient, P1.pat_name, P1.treating_doctor
FROM PATIENTS P1
WHERE EXISTS (
    SELECT *
    FROM PATIENTS P2
    WHERE P1.treating_doctor = P2.treating_doctor AND P2.pat_name = 'Tina Turner'
);

-- 7) To which patients did Laurence Harper give tantum verde?
SELECT P.ID_patient, P.pat_name
FROM PATIENTS P
WHERE P.ID_patient IN (
    SELECT DM.patient
    FROM DOSEOFMEDICINES DM
    WHERE DM.med_name = 'tantum verde'
    ) AND P.treating_doctor IN (
        SELECT W.ID_worker
        FROM WORKERS W
        WHERE W.worker_name = 'Laurence Harper'
    );

-- Start the avg_diagnostics procedure
BEGIN
    avg_diagnostics(1);
END;

-- Start the treated_patients_before procedure
BEGIN
    treated_patients_before(TO_DATE('15-02-2008', 'DD-MM-YYYY'));
END;


/* Give access to all tables and procedures */
GRANT ALL ON XALAKA00.DEPARTMENTS TO XSHEVC01;
GRANT ALL ON XALAKA00.DIAGNOSTIC TO XSHEVC01;
GRANT ALL ON XALAKA00.DOCTORSNURSES TO XSHEVC01;
GRANT ALL ON XALAKA00.DOSEOFMEDICINES TO XSHEVC01;
GRANT ALL ON XALAKA00.MADEDIAGNOSTIC TO XSHEVC01;
GRANT ALL ON XALAKA00.NURSEPATIENT TO XSHEVC01;
GRANT ALL ON XALAKA00.PATIENTS TO XSHEVC01;
GRANT ALL ON XALAKA00.WORKERS TO XSHEVC01;

GRANT EXECUTE ON avg_diagnostics TO XSHEVC01;
GRANT EXECUTE ON treated_patients_before TO XSHEVC01;

-- Materialized view showing patients on the first floor
CREATE MATERIALIZED VIEW PATIENTSFIRSTFLOOR
REFRESH ON COMMIT AS
    SELECT P.pat_name
    FROM XALAKA00.PATIENTS P JOIN XALAKA00.DEPARTMENTS D on P.department = D.id_department
    WHERE D.floor = 1;

SELECT * FROM PATIENTSFIRSTFLOOR;

-- determining whether a person is sick based on the number of diagnostics
WITH patients_diagnostics AS (
    SELECT ID_patient, COUNT(DISTINCT ID_diagnostic) as diag_count
    FROM MadeDiagnostic
    GROUP BY ID_patient
)
SELECT ID_patient,
       diag_count,
       CASE
         WHEN diag_count > 1 THEN 'Sick'
         ELSE 'Healthy'
       END AS sales_level
FROM patients_diagnostics;


--Perform EXPLAIN PLAN before the index creating
EXPLAIN PLAN FOR
    SELECT D.dep_name, COUNT(W.worker_name)
    FROM DoctorsNurses DN JOIN Workers W
    ON DN.ID_worker = W.ID_worker
    JOIN Departments D on W.department = D.ID_department
    WHERE D.floor = 1 AND W.worker_name LIKE 'W%' AND D.dep_name LIKE 'S%'
    GROUP BY D.dep_name;
SELECT * FROM table (DBMS_XPLAN.DISPLAY());


/********************INDEXES********************/
CREATE INDEX Worker_name_index ON Workers(worker_name);
CREATE INDEX Departments_floor_index ON Departments(floor);
CREATE INDEX Departments_name_index ON Departments(dep_name);


--Perform EXPLAIN PLAN after the index creating
EXPLAIN PLAN FOR
    SELECT D.dep_name, COUNT(W.worker_name)
    FROM DoctorsNurses DN JOIN Workers W
    ON DN.ID_worker = W.ID_worker
    JOIN Departments D on W.department = D.ID_department
    WHERE D.floor = 1 AND W.worker_name LIKE 'W%' AND D.dep_name LIKE 'S%'
    GROUP BY D.dep_name;
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY());

/